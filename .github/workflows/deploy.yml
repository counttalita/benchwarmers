name: Deploy to Production

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  test:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Setup environment
        run: |
          echo "DATABASE_URL=postgresql://postgres:postgres@localhost:5432/test_db" >> .env.test
          echo "DIRECT_URL=postgresql://postgres:postgres@localhost:5432/test_db" >> .env.test
          echo "NEXTAUTH_SECRET=test-secret" >> .env.test
          echo "STRIPE_SECRET_KEY=sk_test_..." >> .env.test
          echo "TWILIO_ACCOUNT_SID=test" >> .env.test
          echo "TWILIO_AUTH_TOKEN=test" >> .env.test
          echo "PUSHER_APP_ID=test" >> .env.test
          echo "PUSHER_KEY=test" >> .env.test
          echo "PUSHER_SECRET=test" >> .env.test
          echo "RESEND_API_KEY=test" >> .env.test
      
      - name: Run database migrations
        run: npx prisma db push
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db
      
      - name: Run tests
        run: npm test
        env:
          NODE_ENV: test
      
      - name: Run type check
        run: npm run type-check
      
      - name: Run linting
        run: npm run lint
      
      - name: Build application
        run: npm run build
        env:
          NODE_ENV: production

  security-audit:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Run security audit
        run: npm audit --audit-level=moderate
      
      - name: Run dependency check
        run: npx audit-ci --moderate

  deploy:
    runs-on: ubuntu-latest
    needs: [test, security-audit]
    if: github.ref == 'refs/heads/main'
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Build application
        run: npm run build
        env:
          NODE_ENV: production
      
      - name: Deploy to Vercel
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          vercel-args: '--prod'

  notify:
    runs-on: ubuntu-latest
    needs: deploy
    if: always()
    
    steps:
      - name: Deployment completed
        run: echo "Deployment to production completed successfully"
        if: success()
      
      - name: Deployment failed
        run: echo "Deployment to production failed"
        if: failure()
