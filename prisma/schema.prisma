// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum CompanyType {
  provider
  seeker
  both
}

enum CompanyStatus {
  pending
  active
  suspended
}

enum UserRole {
  admin
  member
}

enum SeniorityLevel {
  junior
  mid
  senior
  lead
  principal
}

enum PaymentStatus {
  pending
  held_in_escrow
  released
  refunded
}

enum EngagementStatus {
  staged
  interviewing
  accepted
  rejected
  active
  completed
  terminated
  disputed
}

enum OfferStatus {
  pending
  accepted
  declined
  countered
}

enum MatchStatus {
  pending
  viewed
  interested
  not_interested
}

enum RequestStatus {
  open
  matching
  closed
}

enum NotificationType {
  match_created
  offer_received
  offer_accepted
  offer_declined
  payment_released
  payment_held
  engagement_started
  engagement_completed
  engagement_status_changed
  manual_invoice_required
  payment_required
  milestone_reached
  dispute_created
  dispute_resolved
  system_alert
  interview_request
  interview_initiated
}

enum NotificationStatus {
  unread
  read
  archived
}

enum NotificationChannel {
  in_app
  email
  sms
  push
}

enum NotificationPriority {
  low
  medium
  high
  urgent
}

enum ConversationType {
  engagement
  support
  general
}

enum ConversationStatus {
  active
  archived
  deleted
}

enum SenderType {
  talent
  seeker
  admin
  system
}

enum MessageType {
  text
  file
  image
  system
}

enum ContractStatus {
  DRAFT
  SENT_FOR_SIGNATURE
  PARTIALLY_SIGNED
  SIGNED
  EXPIRED
  CANCELLED
}

enum ContractType {
  ENGAGEMENT
  NDA
  MSA
  SOW
}

enum SignatureStatus {
  PENDING
  SIGNED
  DECLINED
  EXPIRED
}

enum InterviewStatus {
  scheduled
  completed
  cancelled
  rescheduled
}

enum MeetingType {
  video
  audio
  in_person
}

enum CalendarIntegrationType {
  google
  outlook
  zoom
  teams
}

model User {
  id                     String    @id @default(cuid())
  name                   String
  email                  String    @unique
  phone                  String?   @unique
  passwordHash           String?   @map("password_hash")
  role                   UserRole  @default(member)
  isEmailVerified        Boolean   @default(false) @map("is_email_verified")
  isPhoneVerified        Boolean   @default(false) @map("is_phone_verified")
  emailVerificationToken String?   @map("email_verification_token")
  phoneVerificationToken String?   @map("phone_verification_token")
  resetPasswordToken     String?   @map("reset_password_token")
  resetPasswordExpires   DateTime? @map("reset_password_expires")
  lastLoginAt            DateTime? @map("last_login_at")
  isActive               Boolean   @default(true) @map("is_active")
  paystackCustomerId     String?   @map("paystack_customer_id")
  companyId              String?   @map("company_id")
  createdAt              DateTime  @default(now()) @map("created_at")
  updatedAt              DateTime  @updatedAt @map("updated_at")

  // Relations
  company                 Company?                 @relation(fields: [companyId], references: [id], onDelete: SetNull)
  talentProfiles          TalentProfile[]
  talentRequests          TalentRequest[]
  offers                  Offer[]
  engagements             Engagement[]
  payments                Payment[]
  notifications           Notification[]
  notificationPreferences NotificationPreference[]
  contracts               Contract[]
  contractSignatures      ContractSignature[]
  calendarIntegrations    CalendarIntegration[]
  interviewSchedules      InterviewSchedule[]
  seekerEngagements       Engagement[]             @relation("SeekerUser")
  providerEngagements     Engagement[]             @relation("ProviderUser")

  @@index([email])
  @@index([phone])
  @@index([role])
  @@index([isActive])
  @@index([companyId])
  @@map("users")
}

model Company {
  id                 String        @id @default(cuid())
  name               String
  type               CompanyType
  status             CompanyStatus @default(pending)
  industry           String?
  size               String?
  website            String?
  description        String?
  logoUrl            String?       @map("logo_url")
  address            String?
  city               String?
  state              String?
  country            String?
  postalCode         String?       @map("postal_code")
  phone              String?
  email              String?
  taxId              String?       @map("tax_id")
  registrationNumber String?       @map("registration_number")
  verificationToken  String?       @map("verification_token")
  isVerified         Boolean       @default(false) @map("is_verified")
  verifiedAt         DateTime?     @map("verified_at")
  createdAt          DateTime      @default(now()) @map("created_at")
  updatedAt          DateTime      @updatedAt @map("updated_at")

  // Relations
  users                   User[]
  talentProfiles          TalentProfile[]
  talentRequests          TalentRequest[]
  offers                  Offer[]
  seekerEngagements       Engagement[]             @relation("SeekerEngagements")
  providerEngagements     Engagement[]             @relation("ProviderEngagements")
  payments                Payment[]
  notifications           Notification[]
  notificationPreferences NotificationPreference[]
  contracts               Contract[]
  contractSignatures      ContractSignature[]

  @@index([type])
  @@index([status])
  @@index([industry])
  @@index([isVerified])
  @@map("companies")
}

model TalentProfile {
  id                   String   @id @default(cuid())
  userId               String   @map("user_id")
  companyId            String   @map("company_id")
  name                 String
  title                String?
  bio                  String?
  skills               Json // Array of skill objects
  experience           Json // Array of experience objects
  education            Json? // Array of education objects
  certifications       Json? // Array of certification objects
  portfolio            Json? // Array of portfolio items
  availability         String? // available, partially_available, unavailable
  rateMin              Decimal  @map("rate_min")
  rateMax              Decimal  @map("rate_max")
  currency             String   @default("ZAR")
  location             String?
  timezone             String   @default("UTC")
  languages            String[] // Array of language codes
  remotePreference     String?  @map("remote_preference") // remote, hybrid, onsite
  workingHours         Json?    @map("working_hours") // Working hours configuration
  preferredCompanySize String?  @map("preferred_company_size")
  workStyle            String?  @map("work_style") // agile, waterfall, hybrid
  communicationStyle   String?  @map("communication_style") // formal, casual, mixed
  isVisible            Boolean  @default(true) @map("is_visible")
  status               String   @default("active")
  rating               Decimal? @default(0)
  totalReviews         Int      @default(0) @map("total_reviews")
  createdAt            DateTime @default(now()) @map("created_at")
  updatedAt            DateTime @updatedAt @map("updated_at")

  // Relations
  user               User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  company            Company             @relation(fields: [companyId], references: [id], onDelete: Cascade)
  offers             Offer[]
  engagements        Engagement[]
  reviews            Review[]
  interviewSchedules InterviewSchedule[]
  matches            Match[]

  @@index([userId])
  @@index([companyId])
  @@index([status])
  @@index([isVisible])
  @@index([rating])
  @@map("talent_profiles")
}

model TalentRequest {
  id               String        @id @default(cuid())
  userId           String        @map("user_id")
  companyId        String        @map("company_id")
  title            String
  description      String
  requiredSkills   Json          @map("required_skills") // Array of skill requirements
  preferredSkills  Json?         @map("preferred_skills") // Array of preferred skills
  budgetMin        Decimal       @map("budget_min")
  budgetMax        Decimal       @map("budget_max")
  currency         String        @default("ZAR")
  durationWeeks    Int           @map("duration_weeks")
  startDate        DateTime      @map("start_date")
  urgency          String        @default("medium") // low, medium, high, critical
  projectType      String?       @map("project_type") // development, consulting, design, data, other
  teamSize         Int           @default(1) @map("team_size")
  industry         String?
  companySize      String?       @map("company_size")
  workStyle        String?       @map("work_style") // agile, waterfall, hybrid
  location         String?
  remotePreference String?       @map("remote_preference") // remote, hybrid, onsite
  timezone         String?
  status           RequestStatus @default(open)
  isVisible        Boolean       @default(true) @map("is_visible")
  expiresAt        DateTime?     @map("expires_at")
  createdAt        DateTime      @default(now()) @map("created_at")
  updatedAt        DateTime      @updatedAt @map("updated_at")

  // Relations
  user        User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  company     Company      @relation(fields: [companyId], references: [id], onDelete: Cascade)
  offers      Offer[]
  matches     Match[]
  engagements Engagement[]

  @@index([userId])
  @@index([companyId])
  @@index([status])
  @@index([isVisible])
  @@index([expiresAt])
  @@map("talent_requests")
}

model Match {
  id               String      @id @default(cuid())
  talentRequestId  String      @map("talent_request_id")
  talentId         String      @map("talent_id")
  score            Decimal
  breakdown        Json // Detailed scoring breakdown
  reasons          String[] // Array of match reasons
  concerns         String[] // Array of potential concerns
  rank             Int
  confidence       Decimal
  predictedSuccess Decimal     @map("predicted_success")
  status           MatchStatus @default(pending)
  viewedAt         DateTime?   @map("viewed_at")
  respondedAt      DateTime?   @map("responded_at")
  expiresAt        DateTime?   @map("expires_at")
  responseDeadline DateTime?   @map("response_deadline")
  createdAt        DateTime    @default(now()) @map("created_at")
  updatedAt        DateTime    @updatedAt @map("updated_at")

  // Relations
  talentRequest TalentRequest @relation(fields: [talentRequestId], references: [id], onDelete: Cascade)
  talent        TalentProfile @relation(fields: [talentId], references: [id], onDelete: Cascade)
  offers        Offer[]

  @@index([talentRequestId])
  @@index([talentId])
  @@index([status])
  @@index([score])
  @@index([expiresAt])
  @@map("matches")
}

model Offer {
  id              String      @id @default(cuid())
  matchId         String      @map("match_id")
  talentRequestId String      @map("talent_request_id")
  talentId        String      @map("talent_id")
  companyId       String      @map("company_id")
  userId          String      @map("user_id")
  amount          Decimal
  currency        String      @default("ZAR")
  message         String?
  terms           Json? // Additional terms and conditions
  status          OfferStatus @default(pending)
  respondedAt     DateTime?   @map("responded_at")
  expiresAt       DateTime?   @map("expires_at")
  createdAt       DateTime    @default(now()) @map("created_at")
  updatedAt       DateTime    @updatedAt @map("updated_at")

  // Relations
  match         Match         @relation(fields: [matchId], references: [id], onDelete: Cascade)
  talentRequest TalentRequest @relation(fields: [talentRequestId], references: [id], onDelete: Cascade)
  talent        TalentProfile @relation(fields: [talentId], references: [id], onDelete: Cascade)
  company       Company       @relation(fields: [companyId], references: [id], onDelete: Cascade)
  user          User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  engagements   Engagement[]
  contracts     Contract[]

  @@index([matchId])
  @@index([talentRequestId])
  @@index([talentId])
  @@index([companyId])
  @@index([userId])
  @@index([status])
  @@index([expiresAt])
  @@map("offers")
}

model Engagement {
  id                String           @id @default(cuid())
  offerId           String           @map("offer_id")
  talentRequestId   String           @map("talent_request_id")
  talentId          String           @map("talent_id")
  seekerCompanyId   String           @map("seeker_company_id")
  providerCompanyId String           @map("provider_company_id")
  seekerUserId      String           @map("seeker_user_id")
  providerUserId    String           @map("provider_user_id")
  title             String
  description       String?
  status            EngagementStatus @default(staged)
  startDate         DateTime?        @map("start_date")
  endDate           DateTime?        @map("end_date")
  hourlyRate        Decimal?         @map("hourly_rate")
  totalHours        Int?             @map("total_hours")
  totalAmount       Decimal?         @map("total_amount")
  providerAmount    Decimal?         @map("provider_amount")
  platformFee       Decimal?         @map("platform_fee")
  currency          String           @default("ZAR")
  milestones        Json? // Array of milestone objects
  progress          Json? // Progress tracking data
  rating            Decimal?         @default(0)
  feedback          String?
  interviewDate     DateTime?        @map("interview_date")
  interviewNotes    String?          @map("interview_notes")
  disputedAt        DateTime?        @map("disputed_at")
  disputeReason     String?          @map("dispute_reason")
  completedAt       DateTime?        @map("completed_at")
  terminatedAt      DateTime?        @map("terminated_at")
  terminationReason String?          @map("termination_reason")
  createdAt         DateTime         @default(now()) @map("created_at")
  updatedAt         DateTime         @updatedAt @map("updated_at")

  // Relations
  offer           Offer          @relation(fields: [offerId], references: [id], onDelete: Cascade)
  talentRequest   TalentRequest  @relation(fields: [talentRequestId], references: [id], onDelete: Cascade)
  talent          TalentProfile  @relation(fields: [talentId], references: [id], onDelete: Cascade)
  seekerCompany   Company        @relation("SeekerEngagements", fields: [seekerCompanyId], references: [id], onDelete: Cascade)
  providerCompany Company        @relation("ProviderEngagements", fields: [providerCompanyId], references: [id], onDelete: Cascade)
  seekerUser      User           @relation("SeekerUser", fields: [seekerUserId], references: [id], onDelete: Cascade)
  providerUser    User           @relation("ProviderUser", fields: [providerUserId], references: [id], onDelete: Cascade)
  payments        Payment[]
  contracts       Contract[]
  conversations   Conversation[]
  reviews         Review[]
  User            User?          @relation(fields: [userId], references: [id])
  userId          String?

  @@index([offerId])
  @@index([talentRequestId])
  @@index([talentId])
  @@index([seekerCompanyId])
  @@index([providerCompanyId])
  @@index([seekerUserId])
  @@index([providerUserId])
  @@index([status])
  @@index([startDate])
  @@index([endDate])
  @@map("engagements")
}

model Payment {
  id                String        @id @default(cuid())
  engagementId      String        @map("engagement_id")
  userId            String        @map("user_id")
  companyId         String        @map("company_id")
  amount            Decimal
  currency          String        @default("ZAR")
  type              String // subscription, transaction, transfer, escrow
  status            PaymentStatus @default(pending)
  paystackPaymentId String?       @map("paystack_payment_id")
  reason            String? // completion, milestone, partial, dispute_resolution
  verificationData  Json?         @map("verification_data")
  milestoneId       String?       @map("milestone_id")
  processedAt       DateTime?     @map("processed_at")
  createdAt         DateTime      @default(now()) @map("created_at")
  updatedAt         DateTime      @updatedAt @map("updated_at")

  // Relations
  engagement Engagement @relation(fields: [engagementId], references: [id], onDelete: Cascade)
  user       User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  company    Company    @relation(fields: [companyId], references: [id], onDelete: Cascade)

  @@index([engagementId])
  @@index([userId])
  @@index([companyId])
  @@index([status])
  @@index([type])
  @@index([processedAt])
  @@map("payments")
}

model Subscription {
  id                     String   @id @default(cuid())
  userId                 String   @map("user_id")
  paystackSubscriptionId String   @map("paystack_subscription_id")
  paystackCustomerId     String   @map("paystack_customer_id")
  paystackPlanCode       String   @map("paystack_plan_code")
  status                 String   @default("active")
  startDate              DateTime @map("start_date")
  endDate                DateTime @map("end_date")
  amount                 Decimal
  currency               String   @default("ZAR")
  createdAt              DateTime @default(now()) @map("created_at")
  updatedAt              DateTime @updatedAt @map("updated_at")

  @@index([userId])
  @@index([paystackSubscriptionId])
  @@index([status])
  @@map("subscriptions")
}

model Review {
  id           String   @id @default(cuid())
  engagementId String   @map("engagement_id")
  talentId     String   @map("talent_id")
  reviewerId   String   @map("reviewer_id")
  rating       Decimal
  title        String?
  comment      String?
  categories   String[] // Array of review categories
  isPublic     Boolean  @default(true) @map("is_public")
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")

  // Relations
  engagement Engagement    @relation(fields: [engagementId], references: [id], onDelete: Cascade)
  talent     TalentProfile @relation(fields: [talentId], references: [id], onDelete: Cascade)

  @@index([engagementId])
  @@index([talentId])
  @@index([reviewerId])
  @@index([rating])
  @@index([isPublic])
  @@map("reviews")
}

model Contract {
  id           String         @id @default(cuid())
  engagementId String         @map("engagement_id")
  offerId      String         @map("offer_id")
  userId       String         @map("user_id")
  companyId    String         @map("company_id")
  type         ContractType   @default(ENGAGEMENT)
  status       ContractStatus @default(DRAFT)
  title        String
  content      String // Contract content/template
  terms        Json? // Additional terms and conditions
  metadata     Json? // Additional contract metadata
  sentAt       DateTime?      @map("sent_at")
  expiresAt    DateTime?      @map("expires_at")
  signedAt     DateTime?      @map("signed_at")
  createdAt    DateTime       @default(now()) @map("created_at")
  updatedAt    DateTime       @updatedAt @map("updated_at")

  // Relations
  engagement    Engagement          @relation(fields: [engagementId], references: [id], onDelete: Cascade)
  offer         Offer               @relation(fields: [offerId], references: [id], onDelete: Cascade)
  user          User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  company       Company             @relation(fields: [companyId], references: [id], onDelete: Cascade)
  signatures    ContractSignature[]
  amendments    ContractAmendment[]
  conversations Conversation[]

  @@index([engagementId])
  @@index([offerId])
  @@index([userId])
  @@index([companyId])
  @@index([status])
  @@index([type])
  @@index([expiresAt])
  @@map("contracts")
}

model ContractSignature {
  id            String          @id @default(cuid())
  contractId    String          @map("contract_id")
  userId        String          @map("user_id")
  companyId     String          @map("company_id")
  status        SignatureStatus @default(PENDING)
  signedAt      DateTime?       @map("signed_at")
  signatureData Json?           @map("signature_data")
  ipAddress     String?         @map("ip_address")
  userAgent     String?         @map("user_agent")
  createdAt     DateTime        @default(now()) @map("created_at")
  updatedAt     DateTime        @updatedAt @map("updated_at")

  // Relations
  contract Contract @relation(fields: [contractId], references: [id], onDelete: Cascade)
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  company  Company  @relation(fields: [companyId], references: [id], onDelete: Cascade)

  @@index([contractId])
  @@index([userId])
  @@index([companyId])
  @@index([status])
  @@map("contract_signatures")
}

model ContractAmendment {
  id          String    @id @default(cuid())
  contractId  String    @map("contract_id")
  userId      String    @map("user_id")
  description String
  changes     Json // Detailed changes made
  approvedAt  DateTime? @map("approved_at")
  createdAt   DateTime  @default(now()) @map("created_at")

  // Relations
  contract Contract @relation(fields: [contractId], references: [id], onDelete: Cascade)

  @@index([contractId])
  @@index([userId])
  @@map("contract_amendments")
}

model InterviewSchedule {
  id          String          @id @default(cuid())
  talentId    String          @map("talent_id")
  seekerId    String          @map("seeker_id")
  title       String
  description String?
  startTime   DateTime        @map("start_time")
  endTime     DateTime        @map("end_time")
  timezone    String          @default("UTC")
  meetingType MeetingType     @map("meeting_type")
  meetingUrl  String?         @map("meeting_url")
  location    String?
  status      InterviewStatus @default(scheduled)
  notes       String?
  createdAt   DateTime        @default(now()) @map("created_at")
  updatedAt   DateTime        @updatedAt @map("updated_at")

  // Relations
  talent TalentProfile @relation(fields: [talentId], references: [id], onDelete: Cascade)
  seeker User          @relation(fields: [seekerId], references: [id], onDelete: Cascade)

  @@index([talentId])
  @@index([seekerId])
  @@index([status])
  @@index([startTime])
  @@index([endTime])
  @@map("interview_schedules")
}

model CalendarIntegration {
  id           String                  @id @default(cuid())
  userId       String                  @map("user_id")
  type         CalendarIntegrationType
  accessToken  String                  @map("access_token")
  refreshToken String?                 @map("refresh_token")
  calendarId   String?                 @map("calendar_id")
  isActive     Boolean                 @default(true) @map("is_active")
  createdAt    DateTime                @default(now()) @map("created_at")
  updatedAt    DateTime                @updatedAt @map("updated_at")

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, type])
  @@index([userId])
  @@index([type])
  @@index([isActive])
  @@map("calendar_integrations")
}

model Notification {
  id           String                @id @default(cuid())
  userId       String                @map("user_id")
  companyId    String?               @map("company_id")
  type         NotificationType
  title        String
  message      String
  data         Json? // Additional context data
  status       NotificationStatus    @default(unread)
  priority     NotificationPriority  @default(medium)
  channels     NotificationChannel[] @default([in_app])
  readAt       DateTime?             @map("read_at")
  sentAt       DateTime?             @map("sent_at")
  scheduledFor DateTime?             @map("scheduled_for")
  expiresAt    DateTime?             @map("expires_at")
  createdAt    DateTime              @default(now()) @map("created_at")
  updatedAt    DateTime              @updatedAt @map("updated_at")

  // Relations
  user    User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  company Company? @relation(fields: [companyId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([companyId])
  @@index([type])
  @@index([status])
  @@index([priority])
  @@index([createdAt])
  @@map("notifications")
}

model NotificationPreference {
  id              String                @id @default(cuid())
  userId          String                @map("user_id")
  companyId       String?               @map("company_id")
  type            NotificationType
  channels        NotificationChannel[] @default([in_app, email])
  enabled         Boolean               @default(true)
  quietHoursStart String?               @map("quiet_hours_start") // HH:MM format
  quietHoursEnd   String?               @map("quiet_hours_end") // HH:MM format
  timezone        String                @default("UTC")
  frequency       String                @default("immediate") // immediate, daily, weekly
  createdAt       DateTime              @default(now()) @map("created_at")
  updatedAt       DateTime              @updatedAt @map("updated_at")

  // Relations
  user    User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  company Company? @relation(fields: [companyId], references: [id], onDelete: Cascade)

  @@unique([userId, type])
  @@unique([companyId, type])
  @@index([userId])
  @@index([companyId])
  @@map("notification_preferences")
}

model Conversation {
  id               String   @id @default(cuid())
  participants     String[] // Array of user IDs
  participantNames Json     @map("participant_names") // Record of participant names
  participantTypes Json     @map("participant_types") // Record of participant types
  unreadCount      Json     @map("unread_count") // Record of unread counts per user
  lastMessageId    String?  @map("last_message_id")
  context          String? // JSON string for context data
  isActive         Boolean  @default(true) @map("is_active")
  createdAt        DateTime @default(now()) @map("created_at")
  updatedAt        DateTime @updatedAt @map("updated_at")

  // Relations
  messages     Message[]
  Engagement   Engagement? @relation(fields: [engagementId], references: [id])
  engagementId String?
  Contract     Contract?   @relation(fields: [contractId], references: [id])
  contractId   String?

  @@index([participants])
  @@index([isActive])
  @@map("conversations")
}

model Message {
  id             String      @id @default(cuid())
  conversationId String      @map("conversation_id")
  senderId       String      @map("sender_id")
  senderName     String      @map("sender_name")
  senderType     SenderType  @map("sender_type")
  content        String
  messageType    MessageType @map("message_type")
  fileUrl        String?     @map("file_url")
  fileName       String?     @map("file_name")
  fileSize       Int?        @map("file_size")
  isRead         Boolean     @default(false) @map("is_read")
  createdAt      DateTime    @default(now()) @map("created_at")
  updatedAt      DateTime    @updatedAt @map("updated_at")

  // Relations
  conversation Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)

  @@index([conversationId])
  @@index([senderId])
  @@index([messageType])
  @@index([isRead])
  @@index([createdAt])
  @@map("messages")
}
