// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum CompanyType {
  provider
  seeker
  both
}

enum CompanyStatus {
  pending
  active
  suspended
}

enum UserRole {
  admin
  member
}

enum SeniorityLevel {
  junior
  mid
  senior
  lead
  principal
}

enum PaymentStatus {
  pending
  held_in_escrow
  released
  refunded
}

enum EngagementStatus {
  staged
  interviewing
  accepted
  rejected
  active
  completed
  terminated
  disputed
}

enum OfferStatus {
  pending
  accepted
  declined
  countered
}

enum MatchStatus {
  pending
  viewed
  interested
  not_interested
}

enum RequestStatus {
  open
  matching
  closed
}

enum NotificationType {
  match_created
  offer_received
  offer_accepted
  offer_declined
  payment_released
  payment_held
  engagement_started
  engagement_completed
  engagement_status_changed
  manual_invoice_required
  payment_required
  milestone_reached
  dispute_created
  dispute_resolved
  system_alert
}

enum NotificationStatus {
  unread
  read
  archived
}

enum NotificationChannel {
  in_app
  email
  push
}

enum NotificationPriority {
  low
  medium
  high
  urgent
}

enum ConversationType {
  direct
  group
  support
}

enum ConversationStatus {
  active
  archived
  closed
}

enum MessageType {
  text
  file
  system
  offer
  contract
}

enum SenderType {
  user
  system
}

model Company {
  id                    String        @id @default(cuid())
  name                  String
  domain                String        @unique
  type                  CompanyType
  status                CompanyStatus @default(pending)
  stripeAccountId       String?       @map("stripe_account_id")
  verifiedAt            DateTime?     @map("verified_at")
  domainVerified        Boolean       @default(false) @map("domain_verified")
  domainVerificationToken String?     @unique @map("domain_verification_token")
  domainVerifiedAt      DateTime?     @map("domain_verified_at")
  adminNotes            String?       @map("admin_notes")
  rejectionReason       String?       @map("rejection_reason")
  createdAt             DateTime      @default(now()) @map("created_at")
  updatedAt             DateTime      @updatedAt @map("updated_at")

  // Relations
  users           User[]
  talentProfiles  TalentProfile[]
  talentRequests  TalentRequest[]
  sentOffers      Offer[]       @relation("SeekerOffers")
  receivedOffers  Offer[]       @relation("ProviderOffers")
  notifications   Notification[]
  notificationPreferences NotificationPreference[]
  subscriptions   Subscription[]

  @@index([domain])
  @@index([status])
  @@index([type])
  @@index([domainVerified])
  @@map("companies")
}

model User {
  id               String    @id @default(cuid())
  companyId        String    @map("company_id")
  phoneNumber      String    @unique @map("phone_number")
  email            String?   // Optional, only for transaction notifications
  name             String
  role             UserRole
  phoneVerified    Boolean   @default(false) @map("phone_verified")
  phoneVerifiedAt  DateTime? @map("phone_verified_at")
  lastLoginAt      DateTime? @map("last_login_at")
  createdAt        DateTime  @default(now()) @map("created_at")
  updatedAt        DateTime  @updatedAt @map("updated_at")

  // Relations
  company Company @relation(fields: [companyId], references: [id], onDelete: Cascade)
  otpCodes OTPCode[]
  notifications Notification[]
  notificationPreferences NotificationPreference[]
  subscriptions Subscription[]

  @@index([companyId])
  @@index([phoneNumber])
  @@index([phoneVerified])
  @@map("users")
}

model OTPCode {
  id          String   @id @default(cuid())
  userId      String   @map("user_id")
  phoneNumber String   @map("phone_number")
  code        String
  expiresAt   DateTime @map("expires_at")
  verified    Boolean  @default(false)
  attempts    Int      @default(0)
  createdAt   DateTime @default(now()) @map("created_at")

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("otp_codes")
}

model TalentProfile {
  id                   String         @id @default(cuid())
  companyId            String         @map("company_id")
  name                 String
  title                String
  seniorityLevel       SeniorityLevel @map("seniority_level")
  skills               Json           // Array of {name, level, yearsExperience}
  certifications       Json?          // Array of certification objects
  experience           Json?          // Array of work experience objects
  location             String
  timezone             String?
  remotePreference     String         @map("remote_preference")
  rateMin              Decimal?       @map("rate_min") @db.Decimal(10, 2)
  rateMax              Decimal?       @map("rate_max") @db.Decimal(10, 2)
  currency             String         @default("USD")
  availabilityCalendar Json?          @map("availability_calendar")
  preferences          Json?          // Work preferences, company size, etc.
  pastProjects         Json?          // Array of past project performance data
  languages            Json?          // Array of languages spoken
  isVisible            Boolean        @default(true) @map("is_visible")
  rating               Decimal        @default(0) @db.Decimal(3, 2)
  reviewCount          Int            @default(0) @map("review_count")
  createdAt            DateTime       @default(now()) @map("created_at")
  updatedAt            DateTime       @updatedAt @map("updated_at")

  // Relations
  company Company @relation(fields: [companyId], references: [id], onDelete: Cascade)
  matches Match[]
  reviews Review[] @relation("ProfileReviews")

  @@index([companyId])
  @@index([seniorityLevel])
  @@index([isVisible])
  @@index([rating])
  @@map("talent_profiles")
}

model TalentRequest {
  id                 String        @id @default(cuid())
  companyId          String        @map("company_id")
  title              String
  description        String
  requiredSkills     Json          @map("required_skills") // Array of {name, level, weight, mandatory}
  preferredSkills    Json?         @map("preferred_skills") // Array of {name, level, weight}
  budgetMin          Decimal?      @map("budget_min") @db.Decimal(10, 2)
  budgetMax          Decimal?      @map("budget_max") @db.Decimal(10, 2)
  budgetIdeal        Decimal?      @map("budget_ideal") @db.Decimal(10, 2)
  currency           String        @default("USD")
  startDate          DateTime      @map("start_date")
  durationWeeks      Int           @map("duration_weeks")
  hoursPerWeek       Int?          @map("hours_per_week")
  locationPreference String        @map("location_preference")
  urgency            String        @default("medium") // low, medium, high, critical
  companySize        String?       @map("company_size") // startup, small, medium, enterprise
  industry           String?
  customWeights      Json?         @map("custom_weights") // Custom algorithm weights
  status             RequestStatus @default(open)
  createdAt          DateTime      @default(now()) @map("created_at")
  updatedAt          DateTime      @updatedAt @map("updated_at")

  // Relations
  company Company @relation(fields: [companyId], references: [id], onDelete: Cascade)
  matches Match[]

  @@index([companyId])
  @@index([status])
  @@index([startDate])
  @@index([urgency])
  @@map("talent_requests")
}

model Match {
  id             String      @id @default(cuid())
  requestId      String      @map("request_id")
  profileId      String      @map("profile_id")
  score          Decimal     @db.Decimal(5, 2)
  scoreBreakdown Json        @map("score_breakdown")
  status         MatchStatus @default(pending)
  createdAt      DateTime    @default(now()) @map("created_at")
  updatedAt      DateTime    @updatedAt @map("updated_at")

  // Relations
  request TalentRequest @relation(fields: [requestId], references: [id], onDelete: Cascade)
  profile TalentProfile @relation(fields: [profileId], references: [id], onDelete: Cascade)
  offers  Offer[]

  @@map("matches")
}

model Offer {
  id             String      @id @default(cuid())
  matchId        String      @map("match_id")
  seekerCompanyId String     @map("seeker_company_id")
  providerCompanyId String   @map("provider_company_id")
  rate           Decimal     @db.Decimal(10, 2)
  currency       String      @default("USD")
  startDate      DateTime    @map("start_date")
  durationWeeks  Int         @map("duration_weeks")
  terms          String?
  totalAmount    Decimal     @map("total_amount") @db.Decimal(10, 2)
  platformFee    Decimal     @map("platform_fee") @db.Decimal(10, 2)
  providerAmount Decimal     @map("provider_amount") @db.Decimal(10, 2)
  status         OfferStatus @default(pending)
  createdAt      DateTime    @default(now()) @map("created_at")
  updatedAt      DateTime    @updatedAt @map("updated_at")

  // Relations
  match           Match       @relation(fields: [matchId], references: [id], onDelete: Cascade)
  seekerCompany   Company     @relation("SeekerOffers", fields: [seekerCompanyId], references: [id])
  providerCompany Company     @relation("ProviderOffers", fields: [providerCompanyId], references: [id])
  payments        Payment[]
  engagements     Engagement[]

  @@map("offers")
}

model Payment {
  id                     String        @id @default(cuid())
  offerId                String        @map("offer_id")
  engagementId           String?       @map("engagement_id")
  paystackPaymentId      String?       @unique @map("paystack_payment_id")
  amount                 Decimal       @db.Decimal(10, 2)
  currency               String        @default("ZAR")
  type                   String        @default("escrow") // escrow, release, refund, facilitation_fee
  platformFeeAmount      Decimal       @map("platform_fee_amount") @db.Decimal(10, 2)
  providerAmount         Decimal       @map("provider_amount") @db.Decimal(10, 2)
  status                 PaymentStatus @default(pending)
  reason                 String?       // completion, milestone, dispute_resolution, etc.
  verificationData       Json?         @map("verification_data")
  milestoneId            String?       @map("milestone_id")
  heldAt                 DateTime?     @map("held_at")
  releasedAt             DateTime?     @map("released_at")
  processedAt            DateTime?     @map("processed_at")
  createdAt              DateTime      @default(now()) @map("created_at")
  updatedAt              DateTime      @updatedAt @map("updated_at")

  // Relations
  offer      Offer       @relation(fields: [offerId], references: [id], onDelete: Cascade)
  engagement Engagement? @relation(fields: [engagementId], references: [id])

  @@index([offerId])
  @@index([engagementId])
  @@index([status])
  @@index([type])
  @@map("payments")
}

model Engagement {
  id                   String            @id @default(cuid())
  offerId              String            @map("offer_id")
  status               EngagementStatus  @default(active)
  startDate            DateTime          @map("start_date")
  endDate              DateTime?         @map("end_date")
  totalHours           Decimal?          @map("total_hours") @db.Decimal(8, 2)
  totalAmount          Decimal           @map("total_amount") @db.Decimal(10, 2)
  completionVerified   Boolean           @default(false) @map("completion_verified")
  createdAt            DateTime          @default(now()) @map("created_at")
  updatedAt            DateTime          @updatedAt @map("updated_at")

  // Relations
  offer           Offer           @relation(fields: [offerId], references: [id], onDelete: Cascade)
  reviews         Review[]
  timesheetEntries TimesheetEntry[]
  transactions    Transaction[]
  payments        Payment[]
  invoices        Invoice[]
  manualPayments  ManualPayment[]

  @@map("engagements")
}

enum TimesheetStatus {
  draft
  submitted
  approved
  rejected
}

model TimesheetEntry {
  id            String          @id @default(cuid())
  engagementId  String          @map("engagement_id")
  date          DateTime
  hours         Decimal         @db.Decimal(4, 2)
  description   String
  status        TimesheetStatus @default(draft)
  submittedAt   DateTime?       @map("submitted_at")
  approvedAt    DateTime?       @map("approved_at")
  rejectedAt    DateTime?       @map("rejected_at")
  rejectionReason String?       @map("rejection_reason")
  createdAt     DateTime        @default(now()) @map("created_at")
  updatedAt     DateTime        @updatedAt @map("updated_at")

  // Relations
  engagement Engagement @relation(fields: [engagementId], references: [id], onDelete: Cascade)

  @@index([engagementId])
  @@index([date])
  @@index([status])
  @@map("timesheet_entries")
}

enum TransactionStatus {
  pending
  completed
  failed
  cancelled
}

enum TransactionType {
  payment
  transfer
  refund
  fee
}

model Transaction {
  id                   String            @id @default(cuid())
  engagementId         String?           @map("engagement_id")
  type                 TransactionType
  amount               Decimal           @db.Decimal(10, 2)
  facilitationFee      Decimal?          @map("facilitation_fee") @db.Decimal(10, 2)
  netAmount            Decimal?          @map("net_amount") @db.Decimal(10, 2)
  currency             String            @default("ZAR")
  status               TransactionStatus @default(pending)
  reason               String?
  paystackPaymentId    String?           @map("paystack_payment_id")
  milestoneId          String?           @map("milestone_id")
  processedAt          DateTime?         @map("processed_at")
  description          String?
  metadata             Json?
  createdAt            DateTime          @default(now()) @map("created_at")
  updatedAt            DateTime          @updatedAt @map("updated_at")

  // Relations
  engagement Engagement? @relation(fields: [engagementId], references: [id])

  @@index([status])
  @@index([type])
  @@index([engagementId])
  @@index([createdAt])
  @@map("transactions")
}

model Subscription {
  id                      String    @id @default(cuid())
  userId                  String    @map("user_id")
  companyId               String?   @map("company_id")
  paystackSubscriptionId  String    @unique @map("paystack_subscription_id")
  paystackCustomerId      String    @map("paystack_customer_id")
  planType                String    @map("plan_type") // monthly, yearly
  amount                  Decimal   @db.Decimal(10, 2)
  currency                String    @default("ZAR")
  status                  String    @default("active") // active, cancelled, expired
  startDate               DateTime  @map("start_date")
  nextBillingDate         DateTime  @map("next_billing_date")
  lastBillingDate         DateTime? @map("last_billing_date")
  cancelledAt             DateTime? @map("cancelled_at")
  metadata                Json?
  createdAt               DateTime  @default(now()) @map("created_at")
  updatedAt               DateTime  @updatedAt @map("updated_at")

  // Relations
  user    User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  company Company? @relation(fields: [companyId], references: [id])

  @@index([userId])
  @@index([status])
  @@index([nextBillingDate])
  @@map("subscriptions")
}

model Invoice {
  id              String    @id @default(cuid())
  invoiceNumber   String    @unique @map("invoice_number")
  type            String    // 'seeker' or 'provider'
  engagementId    String    @map("engagement_id")
  fromCompany     String    @map("from_company")
  toCompany       String    @map("to_company")
  subtotal        Decimal   @db.Decimal(10, 2)
  vatAmount       Decimal   @map("vat_amount") @db.Decimal(10, 2)
  total           Decimal   @db.Decimal(10, 2)
  currency        String    @default("ZAR")
  issueDate       DateTime  @map("issue_date")
  dueDate         DateTime  @map("due_date")
  paidDate        DateTime? @map("paid_date")
  status          String    @default("pending") // pending, paid, overdue, cancelled
  items           Json      // Invoice line items
  notes           String?
  paymentReference String?  @map("payment_reference")
  createdAt       DateTime  @default(now()) @map("created_at")
  updatedAt       DateTime  @updatedAt @map("updated_at")

  // Relations
  engagement Engagement @relation(fields: [engagementId], references: [id])

  @@index([engagementId])
  @@index([status])
  @@index([type])
  @@index([dueDate])
  @@map("invoices")
}

model ManualPayment {
  id                String    @id @default(cuid())
  engagementId      String    @map("engagement_id")
  type              String    // 'seeker_payment' or 'provider_payment'
  amount            Decimal   @db.Decimal(10, 2)
  facilitationFee   Decimal?  @map("facilitation_fee") @db.Decimal(10, 2)
  netAmount         Decimal?  @map("net_amount") @db.Decimal(10, 2)
  currency          String    @default("ZAR")
  paymentDate       DateTime  @map("payment_date")
  paymentMethod     String    @map("payment_method") // bank_transfer, eft, etc
  reference         String    @unique
  description       String
  status            String    @default("pending") // pending, completed, failed
  invoiceId         String?   @map("invoice_id")
  processedBy       String    @map("processed_by") // User ID who processed
  notes             String?
  createdAt         DateTime  @default(now()) @map("created_at")
  updatedAt         DateTime  @updatedAt @map("updated_at")

  // Relations
  engagement Engagement @relation(fields: [engagementId], references: [id])

  @@index([engagementId])
  @@index([type])
  @@index([status])
  @@index([paymentDate])
  @@map("manual_payments")
}

enum EscrowStatus {
  pending
  held
  released
  refunded
  disputed
}

model EscrowPayment {
  id            String        @id @default(cuid())
  engagementId  String        @map("engagement_id")
  amount        Decimal       @db.Decimal(10, 2)
  currency      String        @default("USD")
  status        EscrowStatus  @default(pending)
  stripePaymentIntentId String? @map("stripe_payment_intent_id")
  releasedAt    DateTime?     @map("released_at")
  refundedAt    DateTime?     @map("refunded_at")
  createdAt     DateTime      @default(now()) @map("created_at")
  updatedAt     DateTime      @updatedAt @map("updated_at")

  // Relations
  disputes      Dispute[]

  @@index([engagementId])
  @@index([status])
  @@index([stripePaymentIntentId])
  @@map("escrow_payments")
}

enum DisputeStatus {
  open
  in_review
  resolved
  closed
}

model Dispute {
  id              String        @id @default(cuid())
  escrowPaymentId String        @map("escrow_payment_id")
  reason          String
  description     String
  evidence        String[]
  raisedBy        String        @map("raised_by")
  status          DisputeStatus @default(open)
  resolution      String?
  resolvedAt      DateTime?     @map("resolved_at")
  createdAt       DateTime      @default(now()) @map("created_at")
  updatedAt       DateTime      @updatedAt @map("updated_at")

  // Relations
  escrowPayment   EscrowPayment @relation(fields: [escrowPaymentId], references: [id], onDelete: Cascade)

  @@index([escrowPaymentId])
  @@index([status])
  @@index([raisedBy])
  @@map("disputes")
}

model Review {
  id           String  @id @default(cuid())
  engagementId String  @map("engagement_id")
  profileId    String  @map("profile_id")
  rating       Int
  comment      String?
  isPublic     Boolean @default(true) @map("is_public")
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")

  // Relations
  engagement Engagement    @relation(fields: [engagementId], references: [id], onDelete: Cascade)
  profile    TalentProfile @relation("ProfileReviews", fields: [profileId], references: [id], onDelete: Cascade)

  @@map("reviews")
}

model Notification {
  id                String             @id @default(cuid())
  userId            String             @map("user_id")
  companyId         String?            @map("company_id")
  type              NotificationType
  title             String
  message           String
  data              Json?              // Additional context data
  status            NotificationStatus @default(unread)
  priority          NotificationPriority @default(medium)
  channels          NotificationChannel[] @default([in_app])
  readAt            DateTime?          @map("read_at")
  sentAt            DateTime?          @map("sent_at")
  scheduledFor      DateTime?          @map("scheduled_for")
  expiresAt         DateTime?          @map("expires_at")
  createdAt         DateTime           @default(now()) @map("created_at")
  updatedAt         DateTime           @updatedAt @map("updated_at")

  // Relations
  user    User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  company Company? @relation(fields: [companyId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([companyId])
  @@index([type])
  @@index([status])
  @@index([priority])
  @@index([createdAt])
  @@map("notifications")
}

model NotificationPreference {
  id                String              @id @default(cuid())
  userId            String              @map("user_id")
  companyId         String?             @map("company_id")
  type              NotificationType
  channels          NotificationChannel[] @default([in_app, email])
  enabled           Boolean             @default(true)
  quietHoursStart   String?             @map("quiet_hours_start") // HH:MM format
  quietHoursEnd     String?             @map("quiet_hours_end")   // HH:MM format
  timezone          String              @default("UTC")
  frequency         String              @default("immediate") // immediate, daily, weekly
  createdAt         DateTime            @default(now()) @map("created_at")
  updatedAt         DateTime            @updatedAt @map("updated_at")

  // Relations
  user    User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  company Company? @relation(fields: [companyId], references: [id], onDelete: Cascade)

  @@unique([userId, type])
  @@unique([companyId, type])
  @@index([userId])
  @@index([companyId])
  @@map("notification_preferences")
}

model Conversation {
  id           String             @id @default(cuid())
  participants String[]           // Array of user IDs
  type         ConversationType
  subject      String?
  engagementId String?            @map("engagement_id")
  contractId   String?            @map("contract_id")
  offerId      String?            @map("offer_id")
  status       ConversationStatus @default(active)
  metadata     Json?              // Additional context data
  createdAt    DateTime           @default(now()) @map("created_at")
  updatedAt    DateTime           @updatedAt @map("updated_at")

  // Relations
  messages Message[]

  @@index([status])
  @@index([type])
  @@index([engagementId])
  @@index([contractId])
  @@index([offerId])
  @@map("conversations")
}

model Message {
  id             String      @id @default(cuid())
  conversationId String      @map("conversation_id")
  senderId       String      @map("sender_id")
  senderType     SenderType  @map("sender_type")
  recipientId    String      @map("recipient_id")
  recipientType  SenderType  @map("recipient_type")
  content        String
  messageType    MessageType @map("message_type")
  metadata       Json?       // Additional context data
  readAt         DateTime?   @map("read_at")
  createdAt      DateTime    @default(now()) @map("created_at")

  // Relations
  conversation Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)

  @@index([conversationId])
  @@index([senderId])
  @@index([recipientId])
  @@index([messageType])
  @@index([readAt])
  @@index([createdAt])
  @@map("messages")
}
